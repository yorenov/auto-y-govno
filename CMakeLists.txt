cmake_minimum_required(VERSION 3.7)
project(auto-press-y)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Exec")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Libs")

set(USE_KTHOOK ON)
set(USE_IMGUI ON)
set(USE_DXSDK ON)
set(USE_PSDK OFF)
set(USE_THEMIDA OFF)
set(USE_WEBSOCKETPP OFF)
set(USE_OPENSSL OFF)
set(USE_BOOST OFF)
set(USE_RAKHOOK ON)
set(USE_SAMPAPI ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

file(GLOB_RECURSE PROJECT_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.h)
file(GLOB_RECURSE PROJECT_SOURCE_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp)
file(GLOB_RECURSE PROJECT_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)

add_library(${PROJECT_NAME} SHARED ${PROJECT_HEADERS} ${PROJECT_SOURCE_HEADERS} ${PROJECT_SOURCES})

include(FetchContent)

if (USE_KTHOOK)
	FetchContent_Declare(ktsignal GIT_REPOSITORY https://github.com/kin4stat/ktsignal.git GIT_TAG f08a19d9a00ad5284871bf44178d835da7b26ebf)
	FetchContent_Declare(kthook GIT_REPOSITORY https://github.com/kin4stat/kthook.git GIT_TAG e2817793c32570f95fe71208dc64af609c653abe)
	FetchContent_MakeAvailable(ktsignal kthook)
	target_link_libraries(${PROJECT_NAME} PUBLIC kthook)
endif ()

if (USE_IMGUI)
	if (NOT USE_DXSDK)
		message(FATAL_ERROR "Can't use imgui without USE_DXSDK!")
	endif ()
	aux_source_directory(3rdparty/imgui ${PROJECT_NAME}_LIST)
	include_directories(3rdparty/imgui)
	include_directories(3rdparty/imgui/backends)
	list(APPEND ${PROJECT_NAME}_LIST "3rdparty/imgui/backends/imgui_impl_win32.cpp")
	list(APPEND ${PROJECT_NAME}_LIST "3rdparty/imgui/backends/imgui_impl_dx9.cpp")
	target_sources(${PROJECT_NAME} PRIVATE ${${PROJECT_NAME}_LIST})
endif ()

if (USE_DXSDK)
	if(NOT "${DXSDK_DIR}" STREQUAL "")
		target_include_directories( ${PROJECT_NAME} PUBLIC ${DXSDK_DIR}/Include)
		target_link_directories(${PROJECT_NAME} PUBLIC ${DXSDK_DIR}/Lib/x86)
	elseif(NOT "$ENV{DXSDK_DIR}" STREQUAL "")
		target_include_directories( ${PROJECT_NAME} PUBLIC $ENV{DXSDK_DIR}/Include)
		target_link_directories( ${PROJECT_NAME} PUBLIC $ENV{DXSDK_DIR}/Lib/x86)
	endif()
endif ()

if (USE_PSDK)
	find_package(PluginSDK REQUIRED gtasa)
	target_link_libraries(${PROJECT_NAME} PRIVATE PluginSDK::gtasa)
endif ()

if (USE_THEMIDA)
	include(${CMAKE_SOURCE_DIR}/cmake/FindThemidaSDK.cmake)
	target_link_libraries(${PROJECT_NAME} PRIVATE ThemidaSDK)
endif ()

if (USE_WEBSOCKETPP)
	find_package(websocketpp CONFIG REQUIRED)
	target_link_libraries(${PROJECT_NAME} PRIVATE websocketpp::websocketpp)
endif ()

if (USE_OPENSSL)
	find_package(OpenSSL REQUIRED)
	target_link_libraries(${PROJECT_NAME} PRIVATE OpenSSL::SSL OpenSSL::Crypto)
endif ()

if (USE_BOOST)
	set(Boost_USE_STATIC_LIBS ON)
	set(Boost_USE_STATIC_RUNTIME OFF)
	set(Boost_USE_MULTITHREADED ON)
	target_link_libraries(${PROJECT_NAME} PRIVATE ${Boost_LIBRARIES})
	target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
	find_package(Boost REQUIRED COMPONENTS system thread locale)
	if (NOT Boost_FOUND)
		message(FATAL_ERROR "Boost not found!")
	endif ()
	find_package(Threads REQUIRED)
endif ()

if (USE_RAKHOOK)
	FetchContent_Declare(RakHook GIT_REPOSITORY https://github.com/imring/RakHook.git GIT_TAG 625fd17897395997feb56ae293c7c07dbe49d26b)
	FetchContent_MakeAvailable(rakhook)
	target_link_libraries(${PROJECT_NAME} PUBLIC rakhook)
endif ()

if (USE_SAMPAPI)
	add_subdirectory("3rdparty/SAMP-API")
	target_link_libraries(${PROJECT_NAME} PRIVATE sampapi)
endif ()

if (MSVC)
	add_compile_definitions(_WIN32_WINNT=0x0601)
endif ()

target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src/")
add_compile_definitions(_USE_MATH_DEFINES)
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME} SUFFIX ".asi")